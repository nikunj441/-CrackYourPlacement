int dp[201][201];
    
    int solve(int i,int j,vector<vector<int>>& g){
        if(i==0 and j==0) return g[i][j];
        if(dp[i][j]!=-1)return dp[i][j];
        if(i==0) return dp[i][j]=g[i][j]+solve(i,j-1,g);
        if(j==0) return dp[i][j]=g[i][j]+solve(i-1,j,g);
        
        return dp[i][j]=g[i][j]+min(solve(i,j-1,g),solve(i-1,j,g));
    }

//Driver function
    int minPathSum(vector<vector<int>>& grid) {
        memset(dp,-1,sizeof(dp));
        return solve(grid.size()-1,grid[0].size()-1,grid);
    }

/****************************************************************/
//Tabulation 

int minPathSum(vector<vector<int>>& grid) {
        vector<vector<int>> dp(grid.size(),vector<int>(grid[0].size()+1,-1));

         dp[0][0]=grid[0][0];

        for(int j=1; j<grid[0].size(); j++){
            dp[0][j] = grid[0][j] + dp[0][j-1];
        }
        for(int i=1; i<grid.size(); i++){
            dp[i][0] = grid[i][0] + dp[i-1][0];
        }

        for(int i=1; i<grid.size(); i++){

            for(int j=1; j<grid[0].size(); j++){
                dp[i][j]=grid[i][j]+min(dp[i][j-1],dp[i-1][j]);
            }
        }

        return dp[grid.size()-1][grid[0].size()-1];
    }