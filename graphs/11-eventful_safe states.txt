    bool dfs(int i,  vector<int>& vis, vector<vector<int>>& graph, vector<int> & check,vector<int> &pathVis ){

        vis[i]=1;
        check[i]=0;
        pathVis[i]=1;
        for(int j=0; j<graph[i].size(); j++){
            int adjNode = graph[i][j];
            if(!vis[adjNode]){
                if(dfs(adjNode,vis,graph,check,pathVis)==false) return false;
            }
            else if(pathVis[adjNode]==1) return false;
        }
        check[i]=1;
        pathVis[i]=0;
        return true;
    }

    
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
  
        vector<int> ans;
        vector<int> vis(graph.size(),0);
        vector<int> check(graph.size(),0);
        vector<int> pathVis(graph.size(),0);
        for(int i=0; i<graph.size(); i++){

            if(!vis[i]){
              bool temp =  dfs(i,vis,graph,check,pathVis);
            }
            
        }

        for(int i=0; i<check.size(); i++){
            if(check[i]==1) ans.push_back(i);
        }

        return ans;



    }