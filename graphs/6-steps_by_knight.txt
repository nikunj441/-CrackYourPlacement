int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{
	    // Code here
	    if(KnightPos[0]==TargetPos[0] && KnightPos[1]==TargetPos[1])
	    return 0;
	    
	    
	    vector<vector<int>> v(N+1,vector<int>(N+1,-1));
	    
	    queue<pair<int,int>> q;
	    
	    q.push({KnightPos[0],KnightPos[1]});
	    
	    v[KnightPos[0]][KnightPos[1]]=0;
	    
	   int del_row[] = {2,2,1,1,-1,-1,-2,-2};
	   int del_col[] = {1,-1,2,-2,2,-2,1,-1};
	    
	    while(!q.empty()){
	        int row = q.front().first;
	        int col = q.front().second;
	        
	        if(row==TargetPos[0] && col==TargetPos[1]) 
	           return v[row][col];
	           
	        q.pop();
	        
	        for(int k=0; k<8; k++){
	            
	            int n_row = row + del_row[k];
	            int n_col = col + del_col[k];
	            
	            if(n_row<1 or n_row>N or n_col<1 or n_col>N or v[n_row][n_col]!=-1)
	                continue;
	                
	           v[n_row][n_col] = 1 + v[row][col];
	           q.push({n_row,n_col});
	           
	           
	        }
	    }
	    return -1;
    }